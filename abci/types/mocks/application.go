// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v1beta4 "github.com/cometbft/cometbft/api/cometbft/abci/v1beta4"
)

// Application is an autogenerated mock type for the Application type
type Application struct {
	mock.Mock
}

// ApplySnapshotChunk provides a mock function with given fields: _a0, _a1
func (_m *Application) ApplySnapshotChunk(_a0 context.Context, _a1 *v1beta4.ApplySnapshotChunkRequest) (*v1beta4.ApplySnapshotChunkResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1beta4.ApplySnapshotChunkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.ApplySnapshotChunkRequest) (*v1beta4.ApplySnapshotChunkResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.ApplySnapshotChunkRequest) *v1beta4.ApplySnapshotChunkResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta4.ApplySnapshotChunkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta4.ApplySnapshotChunkRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckTx provides a mock function with given fields: _a0, _a1
func (_m *Application) CheckTx(_a0 context.Context, _a1 *v1beta4.CheckTxRequest) (*v1beta4.CheckTxResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1beta4.CheckTxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.CheckTxRequest) (*v1beta4.CheckTxResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.CheckTxRequest) *v1beta4.CheckTxResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta4.CheckTxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta4.CheckTxRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Commit provides a mock function with given fields: _a0, _a1
func (_m *Application) Commit(_a0 context.Context, _a1 *v1beta4.CommitRequest) (*v1beta4.CommitResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1beta4.CommitResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.CommitRequest) (*v1beta4.CommitResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.CommitRequest) *v1beta4.CommitResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta4.CommitResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta4.CommitRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExtendVote provides a mock function with given fields: _a0, _a1
func (_m *Application) ExtendVote(_a0 context.Context, _a1 *v1beta4.ExtendVoteRequest) (*v1beta4.ExtendVoteResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1beta4.ExtendVoteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.ExtendVoteRequest) (*v1beta4.ExtendVoteResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.ExtendVoteRequest) *v1beta4.ExtendVoteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta4.ExtendVoteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta4.ExtendVoteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FinalizeBlock provides a mock function with given fields: _a0, _a1
func (_m *Application) FinalizeBlock(_a0 context.Context, _a1 *v1beta4.FinalizeBlockRequest) (*v1beta4.FinalizeBlockResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1beta4.FinalizeBlockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.FinalizeBlockRequest) (*v1beta4.FinalizeBlockResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.FinalizeBlockRequest) *v1beta4.FinalizeBlockResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta4.FinalizeBlockResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta4.FinalizeBlockRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Info provides a mock function with given fields: _a0, _a1
func (_m *Application) Info(_a0 context.Context, _a1 *v1beta4.InfoRequest) (*v1beta4.InfoResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1beta4.InfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.InfoRequest) (*v1beta4.InfoResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.InfoRequest) *v1beta4.InfoResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta4.InfoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta4.InfoRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitChain provides a mock function with given fields: _a0, _a1
func (_m *Application) InitChain(_a0 context.Context, _a1 *v1beta4.InitChainRequest) (*v1beta4.InitChainResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1beta4.InitChainResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.InitChainRequest) (*v1beta4.InitChainResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.InitChainRequest) *v1beta4.InitChainResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta4.InitChainResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta4.InitChainRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSnapshots provides a mock function with given fields: _a0, _a1
func (_m *Application) ListSnapshots(_a0 context.Context, _a1 *v1beta4.ListSnapshotsRequest) (*v1beta4.ListSnapshotsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1beta4.ListSnapshotsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.ListSnapshotsRequest) (*v1beta4.ListSnapshotsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.ListSnapshotsRequest) *v1beta4.ListSnapshotsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta4.ListSnapshotsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta4.ListSnapshotsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadSnapshotChunk provides a mock function with given fields: _a0, _a1
func (_m *Application) LoadSnapshotChunk(_a0 context.Context, _a1 *v1beta4.LoadSnapshotChunkRequest) (*v1beta4.LoadSnapshotChunkResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1beta4.LoadSnapshotChunkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.LoadSnapshotChunkRequest) (*v1beta4.LoadSnapshotChunkResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.LoadSnapshotChunkRequest) *v1beta4.LoadSnapshotChunkResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta4.LoadSnapshotChunkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta4.LoadSnapshotChunkRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OfferSnapshot provides a mock function with given fields: _a0, _a1
func (_m *Application) OfferSnapshot(_a0 context.Context, _a1 *v1beta4.OfferSnapshotRequest) (*v1beta4.OfferSnapshotResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1beta4.OfferSnapshotResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.OfferSnapshotRequest) (*v1beta4.OfferSnapshotResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.OfferSnapshotRequest) *v1beta4.OfferSnapshotResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta4.OfferSnapshotResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta4.OfferSnapshotRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrepareProposal provides a mock function with given fields: _a0, _a1
func (_m *Application) PrepareProposal(_a0 context.Context, _a1 *v1beta4.PrepareProposalRequest) (*v1beta4.PrepareProposalResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1beta4.PrepareProposalResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.PrepareProposalRequest) (*v1beta4.PrepareProposalResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.PrepareProposalRequest) *v1beta4.PrepareProposalResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta4.PrepareProposalResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta4.PrepareProposalRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessProposal provides a mock function with given fields: _a0, _a1
func (_m *Application) ProcessProposal(_a0 context.Context, _a1 *v1beta4.ProcessProposalRequest) (*v1beta4.ProcessProposalResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1beta4.ProcessProposalResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.ProcessProposalRequest) (*v1beta4.ProcessProposalResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.ProcessProposalRequest) *v1beta4.ProcessProposalResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta4.ProcessProposalResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta4.ProcessProposalRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query provides a mock function with given fields: _a0, _a1
func (_m *Application) Query(_a0 context.Context, _a1 *v1beta4.QueryRequest) (*v1beta4.QueryResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1beta4.QueryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.QueryRequest) (*v1beta4.QueryResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.QueryRequest) *v1beta4.QueryResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta4.QueryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta4.QueryRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyVoteExtension provides a mock function with given fields: _a0, _a1
func (_m *Application) VerifyVoteExtension(_a0 context.Context, _a1 *v1beta4.VerifyVoteExtensionRequest) (*v1beta4.VerifyVoteExtensionResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1beta4.VerifyVoteExtensionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.VerifyVoteExtensionRequest) (*v1beta4.VerifyVoteExtensionResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.VerifyVoteExtensionRequest) *v1beta4.VerifyVoteExtensionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta4.VerifyVoteExtensionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta4.VerifyVoteExtensionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewApplication creates a new instance of Application. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApplication(t interface {
	mock.TestingT
	Cleanup(func())
}) *Application {
	mock := &Application{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
