// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	types "github.com/cometbft/cometbft/abci/types"
	mock "github.com/stretchr/testify/mock"
)

// Application is an autogenerated mock type for the Application type
type Application struct {
	mock.Mock
}

// ApplySnapshotChunk provides a mock function with given fields: ctx, req
func (_m *Application) ApplySnapshotChunk(ctx context.Context, req *types.ApplySnapshotChunkRequest) (*types.ApplySnapshotChunkResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ApplySnapshotChunk")
	}

	var r0 *types.ApplySnapshotChunkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.ApplySnapshotChunkRequest) (*types.ApplySnapshotChunkResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.ApplySnapshotChunkRequest) *types.ApplySnapshotChunkResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ApplySnapshotChunkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.ApplySnapshotChunkRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckTx provides a mock function with given fields: ctx, req
func (_m *Application) CheckTx(ctx context.Context, req *types.CheckTxRequest) (*types.CheckTxResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CheckTx")
	}

	var r0 *types.CheckTxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.CheckTxRequest) (*types.CheckTxResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.CheckTxRequest) *types.CheckTxResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.CheckTxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.CheckTxRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Commit provides a mock function with given fields: ctx, req
func (_m *Application) Commit(ctx context.Context, req *types.CommitRequest) (*types.CommitResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 *types.CommitResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.CommitRequest) (*types.CommitResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.CommitRequest) *types.CommitResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.CommitResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.CommitRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExtendVote provides a mock function with given fields: ctx, req
func (_m *Application) ExtendVote(ctx context.Context, req *types.ExtendVoteRequest) (*types.ExtendVoteResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ExtendVote")
	}

	var r0 *types.ExtendVoteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.ExtendVoteRequest) (*types.ExtendVoteResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.ExtendVoteRequest) *types.ExtendVoteResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ExtendVoteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.ExtendVoteRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FinalizeBlock provides a mock function with given fields: ctx, req
func (_m *Application) FinalizeBlock(ctx context.Context, req *types.FinalizeBlockRequest) (*types.FinalizeBlockResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for FinalizeBlock")
	}

	var r0 *types.FinalizeBlockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.FinalizeBlockRequest) (*types.FinalizeBlockResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.FinalizeBlockRequest) *types.FinalizeBlockResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.FinalizeBlockResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.FinalizeBlockRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Info provides a mock function with given fields: ctx, req
func (_m *Application) Info(ctx context.Context, req *types.InfoRequest) (*types.InfoResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Info")
	}

	var r0 *types.InfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.InfoRequest) (*types.InfoResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.InfoRequest) *types.InfoResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.InfoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.InfoRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitChain provides a mock function with given fields: ctx, req
func (_m *Application) InitChain(ctx context.Context, req *types.InitChainRequest) (*types.InitChainResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for InitChain")
	}

	var r0 *types.InitChainResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.InitChainRequest) (*types.InitChainResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.InitChainRequest) *types.InitChainResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.InitChainResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.InitChainRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSnapshots provides a mock function with given fields: ctx, req
func (_m *Application) ListSnapshots(ctx context.Context, req *types.ListSnapshotsRequest) (*types.ListSnapshotsResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListSnapshots")
	}

	var r0 *types.ListSnapshotsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.ListSnapshotsRequest) (*types.ListSnapshotsResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.ListSnapshotsRequest) *types.ListSnapshotsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ListSnapshotsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.ListSnapshotsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadSnapshotChunk provides a mock function with given fields: ctx, req
func (_m *Application) LoadSnapshotChunk(ctx context.Context, req *types.LoadSnapshotChunkRequest) (*types.LoadSnapshotChunkResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for LoadSnapshotChunk")
	}

	var r0 *types.LoadSnapshotChunkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.LoadSnapshotChunkRequest) (*types.LoadSnapshotChunkResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.LoadSnapshotChunkRequest) *types.LoadSnapshotChunkResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.LoadSnapshotChunkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.LoadSnapshotChunkRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OfferSnapshot provides a mock function with given fields: ctx, req
func (_m *Application) OfferSnapshot(ctx context.Context, req *types.OfferSnapshotRequest) (*types.OfferSnapshotResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for OfferSnapshot")
	}

	var r0 *types.OfferSnapshotResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.OfferSnapshotRequest) (*types.OfferSnapshotResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.OfferSnapshotRequest) *types.OfferSnapshotResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.OfferSnapshotResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.OfferSnapshotRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrepareProposal provides a mock function with given fields: ctx, req
func (_m *Application) PrepareProposal(ctx context.Context, req *types.PrepareProposalRequest) (*types.PrepareProposalResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for PrepareProposal")
	}

	var r0 *types.PrepareProposalResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.PrepareProposalRequest) (*types.PrepareProposalResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.PrepareProposalRequest) *types.PrepareProposalResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.PrepareProposalResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.PrepareProposalRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessProposal provides a mock function with given fields: ctx, req
func (_m *Application) ProcessProposal(ctx context.Context, req *types.ProcessProposalRequest) (*types.ProcessProposalResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ProcessProposal")
	}

	var r0 *types.ProcessProposalResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.ProcessProposalRequest) (*types.ProcessProposalResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.ProcessProposalRequest) *types.ProcessProposalResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ProcessProposalResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.ProcessProposalRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query provides a mock function with given fields: ctx, req
func (_m *Application) Query(ctx context.Context, req *types.QueryRequest) (*types.QueryResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 *types.QueryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryRequest) (*types.QueryResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryRequest) *types.QueryResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyVoteExtension provides a mock function with given fields: ctx, req
func (_m *Application) VerifyVoteExtension(ctx context.Context, req *types.VerifyVoteExtensionRequest) (*types.VerifyVoteExtensionResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for VerifyVoteExtension")
	}

	var r0 *types.VerifyVoteExtensionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.VerifyVoteExtensionRequest) (*types.VerifyVoteExtensionResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.VerifyVoteExtensionRequest) *types.VerifyVoteExtensionResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.VerifyVoteExtensionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.VerifyVoteExtensionRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewApplication creates a new instance of Application. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApplication(t interface {
	mock.TestingT
	Cleanup(func())
}) *Application {
	mock := &Application{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
