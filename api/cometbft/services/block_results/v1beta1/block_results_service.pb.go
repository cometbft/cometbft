// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cometbft/services/block_results/v1beta1/block_results_service.proto

package v1beta1

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("cometbft/services/block_results/v1beta1/block_results_service.proto", fileDescriptor_a4571c8aaff4088b)
}

var fileDescriptor_a4571c8aaff4088b = []byte{
	// 225 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x72, 0x4e, 0xce, 0xcf, 0x4d,
	0x2d, 0x49, 0x4a, 0x2b, 0xd1, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x2d, 0xd6, 0x4f, 0xca,
	0xc9, 0x4f, 0xce, 0x8e, 0x2f, 0x4a, 0x2d, 0x2e, 0xcd, 0x29, 0x29, 0xd6, 0x2f, 0x33, 0x4c, 0x4a,
	0x2d, 0x49, 0x34, 0x44, 0x15, 0x8d, 0x87, 0x2a, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x52,
	0x87, 0x19, 0xa2, 0x07, 0x33, 0x44, 0x0f, 0x45, 0xb9, 0x1e, 0xd4, 0x10, 0x29, 0x6b, 0xb2, 0x6c,
	0x83, 0xd8, 0x62, 0x74, 0x9e, 0x89, 0x4b, 0xd8, 0x09, 0x24, 0x1e, 0x04, 0x11, 0x0e, 0x86, 0x18,
	0x21, 0x34, 0x85, 0x91, 0x8b, 0xdf, 0x3d, 0xb5, 0x04, 0x59, 0x4a, 0xc8, 0x5e, 0x8f, 0x48, 0x27,
	0xe9, 0xa1, 0xe9, 0x0c, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x91, 0x72, 0x20, 0xdf, 0x80, 0xe2,
	0x82, 0xfc, 0xbc, 0xe2, 0x54, 0xa1, 0x05, 0x8c, 0x5c, 0xa2, 0xee, 0xa9, 0x25, 0x3e, 0x89, 0x25,
	0xa9, 0xc5, 0xa8, 0x8e, 0x73, 0x25, 0xc5, 0x6c, 0x4c, 0xfd, 0x54, 0x73, 0xa2, 0x53, 0xd2, 0x89,
	0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3,
	0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0x79, 0xa4, 0x67, 0x96, 0x64, 0x94, 0x26,
	0x81, 0x6c, 0xd0, 0x87, 0xc7, 0x19, 0x9c, 0x91, 0x58, 0x90, 0xa9, 0x4f, 0x64, 0x4c, 0x26, 0xb1,
	0x81, 0x23, 0xcf, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x1f, 0xb5, 0xba, 0x7e, 0x69, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BlockResultsServiceClient is the client API for BlockResultsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlockResultsServiceClient interface {
	// GetBlockResults returns the BlockResults of the requested height.
	GetBlockResults(ctx context.Context, in *GetBlockResultsRequest, opts ...grpc.CallOption) (*GetBlockResultsResponse, error)
	// GetLatestBlockResults returns the BlockResults of the latest committed height.
	GetLatestBlockResults(ctx context.Context, in *GetLatestBlockResultsRequest, opts ...grpc.CallOption) (*GetBlockResultsResponse, error)
}

type blockResultsServiceClient struct {
	cc grpc1.ClientConn
}

func NewBlockResultsServiceClient(cc grpc1.ClientConn) BlockResultsServiceClient {
	return &blockResultsServiceClient{cc}
}

func (c *blockResultsServiceClient) GetBlockResults(ctx context.Context, in *GetBlockResultsRequest, opts ...grpc.CallOption) (*GetBlockResultsResponse, error) {
	out := new(GetBlockResultsResponse)
	err := c.cc.Invoke(ctx, "/cometbft.services.block_results.v1beta1.BlockResultsService/GetBlockResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockResultsServiceClient) GetLatestBlockResults(ctx context.Context, in *GetLatestBlockResultsRequest, opts ...grpc.CallOption) (*GetBlockResultsResponse, error) {
	out := new(GetBlockResultsResponse)
	err := c.cc.Invoke(ctx, "/cometbft.services.block_results.v1beta1.BlockResultsService/GetLatestBlockResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockResultsServiceServer is the server API for BlockResultsService service.
type BlockResultsServiceServer interface {
	// GetBlockResults returns the BlockResults of the requested height.
	GetBlockResults(context.Context, *GetBlockResultsRequest) (*GetBlockResultsResponse, error)
	// GetLatestBlockResults returns the BlockResults of the latest committed height.
	GetLatestBlockResults(context.Context, *GetLatestBlockResultsRequest) (*GetBlockResultsResponse, error)
}

// UnimplementedBlockResultsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBlockResultsServiceServer struct {
}

func (*UnimplementedBlockResultsServiceServer) GetBlockResults(ctx context.Context, req *GetBlockResultsRequest) (*GetBlockResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockResults not implemented")
}
func (*UnimplementedBlockResultsServiceServer) GetLatestBlockResults(ctx context.Context, req *GetLatestBlockResultsRequest) (*GetBlockResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestBlockResults not implemented")
}

func RegisterBlockResultsServiceServer(s grpc1.Server, srv BlockResultsServiceServer) {
	s.RegisterService(&_BlockResultsService_serviceDesc, srv)
}

func _BlockResultsService_GetBlockResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockResultsServiceServer).GetBlockResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cometbft.services.block_results.v1beta1.BlockResultsService/GetBlockResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockResultsServiceServer).GetBlockResults(ctx, req.(*GetBlockResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockResultsService_GetLatestBlockResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestBlockResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockResultsServiceServer).GetLatestBlockResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cometbft.services.block_results.v1beta1.BlockResultsService/GetLatestBlockResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockResultsServiceServer).GetLatestBlockResults(ctx, req.(*GetLatestBlockResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BlockResultsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cometbft.services.block_results.v1beta1.BlockResultsService",
	HandlerType: (*BlockResultsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlockResults",
			Handler:    _BlockResultsService_GetBlockResults_Handler,
		},
		{
			MethodName: "GetLatestBlockResults",
			Handler:    _BlockResultsService_GetLatestBlockResults_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cometbft/services/block_results/v1beta1/block_results_service.proto",
}
