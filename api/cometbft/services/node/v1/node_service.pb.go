// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cometbft/services/node/v1/node_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("cometbft/services/node/v1/node_service.proto", fileDescriptor_8867ea78214b345d)
}

var fileDescriptor_8867ea78214b345d = []byte{
	// 205 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x49, 0xce, 0xcf, 0x4d,
	0x2d, 0x49, 0x4a, 0x2b, 0xd1, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x2d, 0xd6, 0xcf, 0xcb,
	0x4f, 0x49, 0xd5, 0x2f, 0x33, 0x04, 0xd3, 0xf1, 0x50, 0x51, 0xbd, 0x82, 0xa2, 0xfc, 0x92, 0x7c,
	0x21, 0x49, 0x98, 0x6a, 0x3d, 0x98, 0x6a, 0x3d, 0x90, 0x2a, 0xbd, 0x32, 0x43, 0x29, 0x15, 0xfc,
	0x06, 0x41, 0x0c, 0x30, 0xba, 0xcb, 0xc8, 0xc5, 0xed, 0x97, 0x9f, 0x92, 0x1a, 0x0c, 0x51, 0x23,
	0x94, 0xc6, 0xc5, 0xe9, 0x9e, 0x5a, 0x12, 0x5c, 0x92, 0x58, 0x52, 0x5a, 0x2c, 0xa4, 0xad, 0x87,
	0xd3, 0x78, 0x3d, 0xb8, 0xaa, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x29, 0x1d, 0xe2, 0x14,
	0x17, 0x17, 0xe4, 0xe7, 0x15, 0xc3, 0xec, 0xf1, 0x48, 0x4d, 0xcc, 0x29, 0xc9, 0x20, 0x64, 0x0f,
	0x44, 0x15, 0x91, 0xf6, 0xc0, 0x14, 0x43, 0xec, 0x71, 0x0a, 0x39, 0xf1, 0x48, 0x8e, 0xf1, 0xc2,
	0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1,
	0xc6, 0x63, 0x39, 0x86, 0x28, 0xab, 0xf4, 0xcc, 0x92, 0x8c, 0xd2, 0x24, 0x90, 0x69, 0xfa, 0xf0,
	0xa0, 0x82, 0x33, 0x12, 0x0b, 0x32, 0xf5, 0x71, 0x06, 0x60, 0x12, 0x1b, 0x38, 0xf0, 0x8c, 0x01,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x3a, 0x6d, 0xda, 0xf4, 0xad, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodeServiceClient is the client API for NodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeServiceClient interface {
	// GetStatus queries the node current status, including node info, public key,
	// latest block hash, app hash, block height and time.
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
	// GetHealth queries the node's health.
	GetHealth(ctx context.Context, in *GetHealthRequest, opts ...grpc.CallOption) (*GetHealthResponse, error)
}

type nodeServiceClient struct {
	cc grpc1.ClientConn
}

func NewNodeServiceClient(cc grpc1.ClientConn) NodeServiceClient {
	return &nodeServiceClient{cc}
}

func (c *nodeServiceClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, "/cometbft.services.node.v1.NodeService/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) GetHealth(ctx context.Context, in *GetHealthRequest, opts ...grpc.CallOption) (*GetHealthResponse, error) {
	out := new(GetHealthResponse)
	err := c.cc.Invoke(ctx, "/cometbft.services.node.v1.NodeService/GetHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServiceServer is the server API for NodeService service.
type NodeServiceServer interface {
	// GetStatus queries the node current status, including node info, public key,
	// latest block hash, app hash, block height and time.
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	// GetHealth queries the node's health.
	GetHealth(context.Context, *GetHealthRequest) (*GetHealthResponse, error)
}

// UnimplementedNodeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNodeServiceServer struct {
}

func (*UnimplementedNodeServiceServer) GetStatus(ctx context.Context, req *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (*UnimplementedNodeServiceServer) GetHealth(ctx context.Context, req *GetHealthRequest) (*GetHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}

func RegisterNodeServiceServer(s grpc1.Server, srv NodeServiceServer) {
	s.RegisterService(&_NodeService_serviceDesc, srv)
}

func _NodeService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cometbft.services.node.v1.NodeService/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cometbft.services.node.v1.NodeService/GetHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).GetHealth(ctx, req.(*GetHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cometbft.services.node.v1.NodeService",
	HandlerType: (*NodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _NodeService_GetStatus_Handler,
		},
		{
			MethodName: "GetHealth",
			Handler:    _NodeService_GetHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cometbft/services/node/v1/node_service.proto",
}
