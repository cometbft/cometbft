// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	crypto "github.com/cometbft/cometbft/crypto"
	mock "github.com/stretchr/testify/mock"
)

// BatchVerifier is an autogenerated mock type for the BatchVerifier type
type BatchVerifier struct {
	mock.Mock
}

// Add provides a mock function with given fields: key, message, signature
func (_m *BatchVerifier) Add(key crypto.PubKey, message []byte, signature []byte) error {
	ret := _m.Called(key, message, signature)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(crypto.PubKey, []byte, []byte) error); ok {
		r0 = rf(key, message, signature)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Verify provides a mock function with given fields:
func (_m *BatchVerifier) Verify() (bool, []bool) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 bool
	var r1 []bool
	if rf, ok := ret.Get(0).(func() (bool, []bool)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() []bool); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]bool)
		}
	}

	return r0, r1
}

// NewBatchVerifier creates a new instance of BatchVerifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBatchVerifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *BatchVerifier {
	mock := &BatchVerifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
