// Code generated by metricsgen. DO NOT EDIT.

package store

import (
	"github.com/go-kit/kit/metrics/discard"
	prometheus "github.com/go-kit/kit/metrics/prometheus"
	stdprometheus "github.com/prometheus/client_golang/prometheus"
)

func PrometheusMetrics(namespace string, labelsAndValues ...string) *Metrics {
	labels := []string{}
	for i := 0; i < len(labelsAndValues); i += 2 {
		labels = append(labels, labelsAndValues[i])
	}
	return &Metrics{
		BlockStoreAccessDurationSeconds: prometheus.NewHistogramFrom(stdprometheus.HistogramOpts{
			Namespace: namespace,
			Subsystem: MetricsSubsystem,
			Name:      "block_store_access_duration_seconds",
			Help:      "The duration of accesses to the state store labeled by which method was called on the store.",

			Buckets: stdprometheus.ExponentialBuckets(0.0002, 10, 5),
		}, append(labels, "method")).With(labelsAndValues...),
	}
}

func NopMetrics() *Metrics {
	return &Metrics{
		BlockStoreAccessDurationSeconds: discard.NewHistogram(),
	}
}
