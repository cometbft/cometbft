syntax = "proto3";
package cometbft.abci.v1beta1;

import "cometbft/crypto/v1/keys.proto";
// For more information on gogo.proto, see:
// https://github.com/cosmos/gogoproto/blob/master/extensions.md
import "cometbft/crypto/v1/proof.proto";
import "cometbft/types/v1beta1/params.proto";
import "cometbft/types/v1beta1/types.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/cometbft/cometbft/api/cometbft/abci/v1beta1";

// NOTE: When using custom types, mind the warnings.
// https://github.com/cosmos/gogoproto/blob/master/custom_types.md#warnings-and-issues

//----------------------------------------
// Request types

// Request represents a request to the ABCI application.
message Request {
  // Sum of all possible messages.
  oneof value {
    RequestEcho               echo                 = 1;
    RequestFlush              flush                = 2;
    RequestInfo               info                 = 3;
    RequestSetOption          set_option           = 4;
    RequestInitChain          init_chain           = 5;
    RequestQuery              query                = 6;
    RequestBeginBlock         begin_block          = 7;
    RequestCheckTx            check_tx             = 8;
    RequestDeliverTx          deliver_tx           = 9;
    RequestEndBlock           end_block            = 10;
    RequestCommit             commit               = 11;
    RequestListSnapshots      list_snapshots       = 12;
    RequestOfferSnapshot      offer_snapshot       = 13;
    RequestLoadSnapshotChunk  load_snapshot_chunk  = 14;
    RequestApplySnapshotChunk apply_snapshot_chunk = 15;
  }
}

// RequestEcho is a request to "echo" the given string.
message RequestEcho {
  string message = 1;
}

// RequestFlush is a request to flush the write buffer.
message RequestFlush {}

// RequestInfo is a request for the ABCI application version.
message RequestInfo {
  string version       = 1;
  uint64 block_version = 2;
  uint64 p2p_version   = 3;
}

// nondeterministic
message RequestSetOption {
  string key   = 1;
  string value = 2;
}

// RequestInitChain is a request to initialize the blockchain.
message RequestInitChain {
  google.protobuf.Timestamp time = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime)  = true
  ];
  string                   chain_id         = 2;
  ConsensusParams          consensus_params = 3;
  repeated ValidatorUpdate validators       = 4 [(gogoproto.nullable) = false];
  bytes                    app_state_bytes  = 5;
  int64                    initial_height   = 6;
}

// RequestQuery is a request to query the application state.
message RequestQuery {
  bytes  data   = 1;
  string path   = 2;
  int64  height = 3;
  bool   prove  = 4;
}

// RequestBeginBlock indicates the beginning of committing the block.
message RequestBeginBlock {
  bytes                         hash                 = 1;
  cometbft.types.v1beta1.Header header               = 2 [(gogoproto.nullable) = false];
  LastCommitInfo                last_commit_info     = 3 [(gogoproto.nullable) = false];
  repeated Evidence             byzantine_validators = 4 [(gogoproto.nullable) = false];
}

// Type of the transaction check request.
enum CheckTxType {
  // New
  NEW = 0 [(gogoproto.enumvalue_customname) = "New"];
  // Recheck (2nd, 3rd, etc.)
  RECHECK = 1 [(gogoproto.enumvalue_customname) = "Recheck"];
}

// RequestCheckTx is a request to check the transaction.
message RequestCheckTx {
  bytes       tx   = 1;
  CheckTxType type = 2;
}

// RequestDeliverTx is a request to apply the transaction.
message RequestDeliverTx {
  bytes tx = 1;
}

// RequestEndBlock indicates the end of committing the block.
message RequestEndBlock {
  int64 height = 1;
}

// RequestCommit is a request to commit the pending application state.
message RequestCommit {}

// lists available snapshots
message RequestListSnapshots {}

// offers a snapshot to the application
message RequestOfferSnapshot {
  Snapshot snapshot = 1;  // snapshot offered by peers
  bytes    app_hash = 2;  // light client-verified app hash for snapshot height
}

// loads a snapshot chunk
message RequestLoadSnapshotChunk {
  uint64 height = 1;
  uint32 format = 2;
  uint32 chunk  = 3;
}

// Applies a snapshot chunk
message RequestApplySnapshotChunk {
  uint32 index  = 1;
  bytes  chunk  = 2;
  string sender = 3;
}

//----------------------------------------
// Response types

// Response represents a response from the ABCI application.
message Response {
  // Sum of all possible messages.
  oneof value {
    ResponseException          exception            = 1;
    ResponseEcho               echo                 = 2;
    ResponseFlush              flush                = 3;
    ResponseInfo               info                 = 4;
    ResponseSetOption          set_option           = 5;
    ResponseInitChain          init_chain           = 6;
    ResponseQuery              query                = 7;
    ResponseBeginBlock         begin_block          = 8;
    ResponseCheckTx            check_tx             = 9;
    ResponseDeliverTx          deliver_tx           = 10;
    ResponseEndBlock           end_block            = 11;
    ResponseCommit             commit               = 12;
    ResponseListSnapshots      list_snapshots       = 13;
    ResponseOfferSnapshot      offer_snapshot       = 14;
    ResponseLoadSnapshotChunk  load_snapshot_chunk  = 15;
    ResponseApplySnapshotChunk apply_snapshot_chunk = 16;
  }
}

// nondeterministic
message ResponseException {
  string error = 1;
}

// ResponseEcho indicates that the connection is still alive.
message ResponseEcho {
  string message = 1;
}

// ResponseFlush indicates that the ABCI application state was flushed?
message ResponseFlush {}

// ResponseInfo contains the ABCI application version information.
message ResponseInfo {
  string data = 1;

  string version     = 2;
  uint64 app_version = 3;

  int64 last_block_height   = 4;
  bytes last_block_app_hash = 5;
}

// nondeterministic
message ResponseSetOption {
  uint32 code = 1;
  // bytes data = 2;
  string log  = 3;
  string info = 4;
}

// ResponseInitChain contains the ABCI application's hash and updates to the
// validator set and/or the consensus params, if any.
message ResponseInitChain {
  ConsensusParams          consensus_params = 1;
  repeated ValidatorUpdate validators       = 2 [(gogoproto.nullable) = false];
  bytes                    app_hash         = 3;
}

// ResponseQuery contains the ABCI application data along with a proof.
message ResponseQuery {
  uint32 code = 1;
  // bytes data = 2; // use "value" instead.
  string                      log       = 3;  // nondeterministic
  string                      info      = 4;  // nondeterministic
  int64                       index     = 5;
  bytes                       key       = 6;
  bytes                       value     = 7;
  cometbft.crypto.v1.ProofOps proof_ops = 8;
  int64                       height    = 9;
  string                      codespace = 10;
}

// ResponseBeginBlock contains a list of block-level events.
message ResponseBeginBlock {
  repeated Event events = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag)  = "events,omitempty"
  ];
}

// ResponseCheckTx shows if the transaction was deemed valid by the ABCI
// application.
message ResponseCheckTx {
  uint32         code       = 1;
  bytes          data       = 2;
  string         log        = 3;  // nondeterministic
  string         info       = 4;  // nondeterministic
  int64          gas_wanted = 5 [json_name = "gas_wanted"];
  int64          gas_used   = 6 [json_name = "gas_used"];
  repeated Event events     = 7 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag)  = "events,omitempty"
  ];
  string codespace = 8;
  string sender    = 9;
  int64  priority  = 10;

  // mempool_error is set by CometBFT.
  // ABCI applications creating a ResponseCheckTX should not set mempool_error.
  string mempool_error = 11;
}

// ResponseDeliverTx contains a result of committing the given transaction and a
// list of events.
message ResponseDeliverTx {
  uint32         code       = 1;
  bytes          data       = 2;
  string         log        = 3;  // nondeterministic
  string         info       = 4;  // nondeterministic
  int64          gas_wanted = 5 [json_name = "gas_wanted"];
  int64          gas_used   = 6 [json_name = "gas_used"];
  repeated Event events     = 7 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag)  = "events,omitempty"
  ];  // nondeterministic
  string codespace = 8;
}

// ResponseEndBlock contains updates to consensus params and/or validator set changes, if any.
message ResponseEndBlock {
  repeated ValidatorUpdate validator_updates       = 1 [(gogoproto.nullable) = false];
  ConsensusParams          consensus_param_updates = 2;
  repeated Event           events                  = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag)  = "events,omitempty"
  ];
}

// ResponseCommit indicates how much blocks should CometBFT retain.
message ResponseCommit {
  // reserve 1
  bytes data          = 2;
  int64 retain_height = 3;
}

// ResponseListSnapshots contains the list of snapshots.
message ResponseListSnapshots {
  repeated Snapshot snapshots = 1;
}

// ResponseOfferSnapshot indicates the ABCI application decision whenever to
// provide a snapshot to the requester or not.
message ResponseOfferSnapshot {
  Result result = 1;

  // The status code.
  enum Result {
    // Unknown result, abort all snapshot restoration
    UNKNOWN = 0;
    // Snapshot accepted, apply chunks
    ACCEPT = 1;
    // Abort all snapshot restoration
    ABORT = 2;
    // Reject this specific snapshot, try others
    REJECT = 3;
    // Reject all snapshots of this format, try others
    REJECT_FORMAT = 4;
    // Reject all snapshots from the sender(s), try others
    REJECT_SENDER = 5;
  }
}

// ResponseLoadSnapshotChunk returns a snapshot's chunk.
message ResponseLoadSnapshotChunk {
  bytes chunk = 1;
}

// ResponseApplySnapshotChunk returns a result of applying the specified chunk.
message ResponseApplySnapshotChunk {
  Result          result         = 1;
  repeated uint32 refetch_chunks = 2;  // Chunks to refetch and reapply
  repeated string reject_senders = 3;  // Chunk senders to reject and ban

  // The status code.
  enum Result {
    // Unknown result, abort all snapshot restoration
    UNKNOWN = 0;
    // Chunk successfully accepted
    ACCEPT = 1;
    // Abort all snapshot restoration
    ABORT = 2;
    // Retry chunk (combine with refetch and reject)
    RETRY = 3;
    // Retry snapshot (combine with refetch and reject)
    RETRY_SNAPSHOT = 4;
    // Reject this snapshot, try others
    REJECT_SNAPSHOT = 5;
  }
}

//----------------------------------------
// Misc.

// ConsensusParams contains all consensus-relevant parameters
// that can be adjusted by the abci app
message ConsensusParams {
  BlockParams                            block     = 1;
  cometbft.types.v1beta1.EvidenceParams  evidence  = 2;
  cometbft.types.v1beta1.ValidatorParams validator = 3;
  cometbft.types.v1beta1.VersionParams   version   = 4;
}

// BlockParams contains limits on the block size.
message BlockParams {
  // Note: must be greater than 0
  int64 max_bytes = 1;
  // Note: must be greater or equal to -1
  int64 max_gas = 2;
}

// LastCommitInfo contains votes for the particular round.
message LastCommitInfo {
  int32             round = 1;
  repeated VoteInfo votes = 2 [(gogoproto.nullable) = false];
}

// Event allows application developers to attach additional information to
// ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and ResponseDeliverTx.
// Later, transactions may be queried using these events.
message Event {
  string                  type       = 1;
  repeated EventAttribute attributes = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag)  = "attributes,omitempty"
  ];
}

// EventAttribute is a single key-value pair, associated with an event.
message EventAttribute {
  bytes key   = 1;
  bytes value = 2;
  bool  index = 3;  // nondeterministic
}

// TxResult contains results of executing the transaction.
//
// One usage is indexing transaction results.
message TxResult {
  int64             height = 1;
  uint32            index  = 2;
  bytes             tx     = 3;
  ResponseDeliverTx result = 4 [(gogoproto.nullable) = false];
}

//----------------------------------------
// Blockchain Types

// Validator in the validator set.
message Validator {
  bytes address = 1;  // The first 20 bytes of SHA256(public key)
  // PubKey pub_key = 2 [(gogoproto.nullable)=false];
  int64 power = 3;  // The voting power
}

// ValidatorUpdate is a singular update to a validator set.
message ValidatorUpdate {
  cometbft.crypto.v1.PublicKey pub_key = 1 [(gogoproto.nullable) = false];
  int64                        power   = 2;
}

// VoteInfo contains the information about the vote.
message VoteInfo {
  Validator validator         = 1 [(gogoproto.nullable) = false];
  bool      signed_last_block = 2;
}

// The type of evidence.
enum EvidenceType {
  // Unknown
  UNKNOWN = 0;
  // Duplicate vote
  DUPLICATE_VOTE = 1;
  // Light client attack
  LIGHT_CLIENT_ATTACK = 2;
}

// Evidence of a misbehavior committed by a validator.
message Evidence {
  EvidenceType type = 1;
  // The offending validator
  Validator validator = 2 [(gogoproto.nullable) = false];
  // The height when the offense occurred
  int64 height = 3;
  // The corresponding time where the offense occurred
  google.protobuf.Timestamp time = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime)  = true
  ];
  // Total voting power of the validator set in case the ABCI application does
  // not store historical validators.
  // https://github.com/tendermint/tendermint/issues/4581
  int64 total_voting_power = 5;
}

//----------------------------------------
// State Sync Types

// Snapshot of the ABCI application state.
message Snapshot {
  uint64 height   = 1;  // The height at which the snapshot was taken
  uint32 format   = 2;  // The application-specific snapshot format
  uint32 chunks   = 3;  // Number of chunks in the snapshot
  bytes  hash     = 4;  // Arbitrary snapshot hash, equal only if identical
  bytes  metadata = 5;  // Arbitrary application metadata
}

//----------------------------------------
// Service Definition

// ABCIApplication is a service for an ABCI application.
service ABCIApplication {
  // Echo returns back the same message it is sent.
  rpc Echo(RequestEcho) returns (ResponseEcho);
  // Flush flushes the write buffer.
  rpc Flush(RequestFlush) returns (ResponseFlush);
  // Info returns information about the application state.
  rpc Info(RequestInfo) returns (ResponseInfo);
  // SetOption sets a parameter in the application.
  rpc SetOption(RequestSetOption) returns (ResponseSetOption);
  // DeliverTx applies a transaction.
  rpc DeliverTx(RequestDeliverTx) returns (ResponseDeliverTx);
  // CheckTx validates a transaction.
  rpc CheckTx(RequestCheckTx) returns (ResponseCheckTx);
  // Query queries the application state.
  rpc Query(RequestQuery) returns (ResponseQuery);
  // Commit commits a block of transactions.
  rpc Commit(RequestCommit) returns (ResponseCommit);
  // InitChain initializes the blockchain.
  rpc InitChain(RequestInitChain) returns (ResponseInitChain);
  // BeginBlock signals the beginning of a block.
  rpc BeginBlock(RequestBeginBlock) returns (ResponseBeginBlock);
  // EndBlock signals the end of a block, returns changes to the validator set.
  rpc EndBlock(RequestEndBlock) returns (ResponseEndBlock);
  // ListSnapshots lists all the available snapshots.
  rpc ListSnapshots(RequestListSnapshots) returns (ResponseListSnapshots);
  // OfferSnapshot sends a snapshot offer.
  rpc OfferSnapshot(RequestOfferSnapshot) returns (ResponseOfferSnapshot);
  // LoadSnapshotChunk returns a chunk of snapshot.
  rpc LoadSnapshotChunk(RequestLoadSnapshotChunk) returns (ResponseLoadSnapshotChunk);
  // ApplySnapshotChunk applies a chunk of snapshot.
  rpc ApplySnapshotChunk(RequestApplySnapshotChunk) returns (ResponseApplySnapshotChunk);
}
