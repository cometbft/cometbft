syntax = "proto3";
package cometbft.privval.v1beta1;

import "cometbft/crypto/v1/keys.proto";
import "cometbft/types/v1beta1/types.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/cometbft/cometbft/api/cometbft/privval/v1beta1";

// Errors is a list of error codes that can be returned by the remote signer.
enum Errors {
  // Unknown error
  ERRORS_UNKNOWN = 0;
  // Unexpected response
  ERRORS_UNEXPECTED_RESPONSE = 1;
  // Connection lost
  ERRORS_NO_CONNECTION = 2;
  // Connection timeout
  ERRORS_CONNECTION_TIMEOUT = 3;
  // Read timeout
  ERRORS_READ_TIMEOUT = 4;
  // Write timeout
  ERRORS_WRITE_TIMEOUT = 5;
}

// A service for broadcasting transactions.
message RemoteSignerError {
  int32  code        = 1;
  string description = 2;
}

// PubKeyRequest requests the consensus public key from the remote signer.
message PubKeyRequest {
  string chain_id = 1;
}

// PubKeyResponse is a response message containing the public key.
message PubKeyResponse {
  cometbft.crypto.v1.PublicKey pub_key = 1 [(gogoproto.nullable) = false];
  RemoteSignerError            error   = 2;
}

// SignVoteRequest is a request to sign a vote
message SignVoteRequest {
  cometbft.types.v1beta1.Vote vote     = 1;
  string                      chain_id = 2;
}

// SignedVoteResponse is a response containing a signed vote or an error
message SignedVoteResponse {
  cometbft.types.v1beta1.Vote vote  = 1 [(gogoproto.nullable) = false];
  RemoteSignerError           error = 2;
}

// SignProposalRequest is a request to sign a proposal
message SignProposalRequest {
  cometbft.types.v1beta1.Proposal proposal = 1;
  string                          chain_id = 2;
}

// SignedProposalResponse is response containing a signed proposal or an error
message SignedProposalResponse {
  cometbft.types.v1beta1.Proposal proposal = 1 [(gogoproto.nullable) = false];
  RemoteSignerError               error    = 2;
}

// PingRequest is a request to confirm that the connection is alive.
message PingRequest {}

// PingResponse is a response to confirm that the connection is alive.
message PingResponse {}

// Message is an abstract message to/from the remote signer.
message Message {
  // Sum of all possible messages.
  oneof sum {
    PubKeyRequest          pub_key_request          = 1;
    PubKeyResponse         pub_key_response         = 2;
    SignVoteRequest        sign_vote_request        = 3;
    SignedVoteResponse     signed_vote_response     = 4;
    SignProposalRequest    sign_proposal_request    = 5;
    SignedProposalResponse signed_proposal_response = 6;
    PingRequest            ping_request             = 7;
    PingResponse           ping_response            = 8;
  }
}
