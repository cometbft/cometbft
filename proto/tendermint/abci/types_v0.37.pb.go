// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tendermint/abci/types_v0.37.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	_ "github.com/tendermint/tendermint/proto/tendermint/crypto"
	_ "github.com/tendermint/tendermint/proto/tendermint/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CustomEvent struct {
	Type       string               `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Attributes []V047EventAttribute `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (m *CustomEvent) Reset()         { *m = CustomEvent{} }
func (m *CustomEvent) String() string { return proto.CompactTextString(m) }
func (*CustomEvent) ProtoMessage()    {}
func (*CustomEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_585bd9c9ade03083, []int{0}
}
func (m *CustomEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomEvent.Merge(m, src)
}
func (m *CustomEvent) XXX_Size() int {
	return m.Size()
}
func (m *CustomEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomEvent.DiscardUnknown(m)
}

var xxx_messageInfo_CustomEvent proto.InternalMessageInfo

func (m *CustomEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *CustomEvent) GetAttributes() []V047EventAttribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// EventAttribute is a single key-value pair, associated with an event.
type V047EventAttribute struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Index bool   `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *V047EventAttribute) Reset()         { *m = V047EventAttribute{} }
func (m *V047EventAttribute) String() string { return proto.CompactTextString(m) }
func (*V047EventAttribute) ProtoMessage()    {}
func (*V047EventAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_585bd9c9ade03083, []int{1}
}
func (m *V047EventAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *V047EventAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_V047EventAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *V047EventAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V047EventAttribute.Merge(m, src)
}
func (m *V047EventAttribute) XXX_Size() int {
	return m.Size()
}
func (m *V047EventAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_V047EventAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_V047EventAttribute proto.InternalMessageInfo

func (m *V047EventAttribute) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *V047EventAttribute) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *V047EventAttribute) GetIndex() bool {
	if m != nil {
		return m.Index
	}
	return false
}

type CustomResponseDeliverTx struct {
	Code      uint32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Data      []byte        `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Log       string        `protobuf:"bytes,3,opt,name=log,proto3" json:"log,omitempty"`
	Info      string        `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
	GasWanted int64         `protobuf:"varint,5,opt,name=gas_wanted,proto3" json:"gas_wanted,omitempty"`
	GasUsed   int64         `protobuf:"varint,6,opt,name=gas_used,proto3" json:"gas_used,omitempty"`
	Events    []CustomEvent `protobuf:"bytes,7,rep,name=events,proto3" json:"events,omitempty"`
	Codespace string        `protobuf:"bytes,8,opt,name=codespace,proto3" json:"codespace,omitempty"`
}

func (m *CustomResponseDeliverTx) Reset()         { *m = CustomResponseDeliverTx{} }
func (m *CustomResponseDeliverTx) String() string { return proto.CompactTextString(m) }
func (*CustomResponseDeliverTx) ProtoMessage()    {}
func (*CustomResponseDeliverTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_585bd9c9ade03083, []int{2}
}
func (m *CustomResponseDeliverTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomResponseDeliverTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomResponseDeliverTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomResponseDeliverTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomResponseDeliverTx.Merge(m, src)
}
func (m *CustomResponseDeliverTx) XXX_Size() int {
	return m.Size()
}
func (m *CustomResponseDeliverTx) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomResponseDeliverTx.DiscardUnknown(m)
}

var xxx_messageInfo_CustomResponseDeliverTx proto.InternalMessageInfo

func (m *CustomResponseDeliverTx) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CustomResponseDeliverTx) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CustomResponseDeliverTx) GetLog() string {
	if m != nil {
		return m.Log
	}
	return ""
}

func (m *CustomResponseDeliverTx) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *CustomResponseDeliverTx) GetGasWanted() int64 {
	if m != nil {
		return m.GasWanted
	}
	return 0
}

func (m *CustomResponseDeliverTx) GetGasUsed() int64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

func (m *CustomResponseDeliverTx) GetEvents() []CustomEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *CustomResponseDeliverTx) GetCodespace() string {
	if m != nil {
		return m.Codespace
	}
	return ""
}

type CustomResponseBeginBlock struct {
	Events []CustomEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (m *CustomResponseBeginBlock) Reset()         { *m = CustomResponseBeginBlock{} }
func (m *CustomResponseBeginBlock) String() string { return proto.CompactTextString(m) }
func (*CustomResponseBeginBlock) ProtoMessage()    {}
func (*CustomResponseBeginBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_585bd9c9ade03083, []int{3}
}
func (m *CustomResponseBeginBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomResponseBeginBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomResponseBeginBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomResponseBeginBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomResponseBeginBlock.Merge(m, src)
}
func (m *CustomResponseBeginBlock) XXX_Size() int {
	return m.Size()
}
func (m *CustomResponseBeginBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomResponseBeginBlock.DiscardUnknown(m)
}

var xxx_messageInfo_CustomResponseBeginBlock proto.InternalMessageInfo

func (m *CustomResponseBeginBlock) GetEvents() []CustomEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type CustomResponseEndBlock struct {
	ValidatorUpdates      []ValidatorUpdate `protobuf:"bytes,1,rep,name=validator_updates,json=validatorUpdates,proto3" json:"validator_updates"`
	ConsensusParamUpdates *ConsensusParams  `protobuf:"bytes,2,opt,name=consensus_param_updates,json=consensusParamUpdates,proto3" json:"consensus_param_updates,omitempty"`
	Events                []CustomEvent     `protobuf:"bytes,3,rep,name=events,proto3" json:"events,omitempty"`
}

func (m *CustomResponseEndBlock) Reset()         { *m = CustomResponseEndBlock{} }
func (m *CustomResponseEndBlock) String() string { return proto.CompactTextString(m) }
func (*CustomResponseEndBlock) ProtoMessage()    {}
func (*CustomResponseEndBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_585bd9c9ade03083, []int{4}
}
func (m *CustomResponseEndBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomResponseEndBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomResponseEndBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomResponseEndBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomResponseEndBlock.Merge(m, src)
}
func (m *CustomResponseEndBlock) XXX_Size() int {
	return m.Size()
}
func (m *CustomResponseEndBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomResponseEndBlock.DiscardUnknown(m)
}

var xxx_messageInfo_CustomResponseEndBlock proto.InternalMessageInfo

func (m *CustomResponseEndBlock) GetValidatorUpdates() []ValidatorUpdate {
	if m != nil {
		return m.ValidatorUpdates
	}
	return nil
}

func (m *CustomResponseEndBlock) GetConsensusParamUpdates() *ConsensusParams {
	if m != nil {
		return m.ConsensusParamUpdates
	}
	return nil
}

func (m *CustomResponseEndBlock) GetEvents() []CustomEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

// One usage is indexing transaction results.
type CustomTxResult struct {
	Height int64                   `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Index  uint32                  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Tx     []byte                  `protobuf:"bytes,3,opt,name=tx,proto3" json:"tx,omitempty"`
	Result CustomResponseDeliverTx `protobuf:"bytes,4,opt,name=result,proto3" json:"result"`
}

func (m *CustomTxResult) Reset()         { *m = CustomTxResult{} }
func (m *CustomTxResult) String() string { return proto.CompactTextString(m) }
func (*CustomTxResult) ProtoMessage()    {}
func (*CustomTxResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_585bd9c9ade03083, []int{5}
}
func (m *CustomTxResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomTxResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomTxResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomTxResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomTxResult.Merge(m, src)
}
func (m *CustomTxResult) XXX_Size() int {
	return m.Size()
}
func (m *CustomTxResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomTxResult.DiscardUnknown(m)
}

var xxx_messageInfo_CustomTxResult proto.InternalMessageInfo

func (m *CustomTxResult) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *CustomTxResult) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *CustomTxResult) GetTx() []byte {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *CustomTxResult) GetResult() CustomResponseDeliverTx {
	if m != nil {
		return m.Result
	}
	return CustomResponseDeliverTx{}
}

func init() {
	proto.RegisterType((*CustomEvent)(nil), "tendermint.abci.CustomEvent")
	proto.RegisterType((*V047EventAttribute)(nil), "tendermint.abci.V047EventAttribute")
	proto.RegisterType((*CustomResponseDeliverTx)(nil), "tendermint.abci.CustomResponseDeliverTx")
	proto.RegisterType((*CustomResponseBeginBlock)(nil), "tendermint.abci.CustomResponseBeginBlock")
	proto.RegisterType((*CustomResponseEndBlock)(nil), "tendermint.abci.CustomResponseEndBlock")
	proto.RegisterType((*CustomTxResult)(nil), "tendermint.abci.CustomTxResult")
}

func init() { proto.RegisterFile("tendermint/abci/types_v0.37.proto", fileDescriptor_585bd9c9ade03083) }

var fileDescriptor_585bd9c9ade03083 = []byte{
	// 638 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4f, 0x4f, 0xd4, 0x40,
	0x14, 0xdf, 0xb6, 0xb0, 0xc2, 0x80, 0x88, 0x13, 0x84, 0x06, 0x97, 0xb2, 0xae, 0x97, 0x4d, 0x34,
	0x2d, 0x01, 0x13, 0xce, 0x16, 0xf1, 0x68, 0xcc, 0x88, 0xc6, 0x78, 0xd9, 0xcc, 0xb6, 0x43, 0x19,
	0x69, 0x3b, 0x4d, 0x67, 0x5a, 0x77, 0xef, 0x7e, 0x00, 0xbd, 0xe8, 0x57, 0xe2, 0xc8, 0xd1, 0x13,
	0x31, 0x70, 0xf3, 0x53, 0x98, 0x99, 0x69, 0xd9, 0xae, 0xbb, 0xde, 0xb8, 0x34, 0xef, 0xcf, 0xef,
	0xfd, 0xe6, 0xbd, 0x5f, 0xdf, 0x0c, 0x78, 0x22, 0x48, 0x1a, 0x92, 0x3c, 0xa1, 0xa9, 0xf0, 0xf0,
	0x30, 0xa0, 0x9e, 0x18, 0x67, 0x84, 0x0f, 0xca, 0x3d, 0xf7, 0xe0, 0xd0, 0xcd, 0x72, 0x26, 0x18,
	0x7c, 0x30, 0x81, 0xb8, 0x12, 0xb2, 0xbd, 0xd3, 0xa8, 0x09, 0xf2, 0x71, 0x26, 0x98, 0x97, 0xe5,
	0x8c, 0x9d, 0x6a, 0xfc, 0x76, 0xa7, 0x91, 0x56, 0x6c, 0xfa, 0x3b, 0x27, 0x5b, 0x15, 0x9f, 0x93,
	0x71, 0x9d, 0xdd, 0x99, 0xa9, 0xcd, 0x70, 0x8e, 0x93, 0x3a, 0xfd, 0x78, 0x6e, 0xb7, 0x55, 0x72,
	0x37, 0x62, 0x2c, 0x8a, 0x89, 0xa7, 0xbc, 0x61, 0x71, 0xea, 0x09, 0x9a, 0x10, 0x2e, 0x70, 0x92,
	0x55, 0x80, 0x8d, 0x88, 0x45, 0x4c, 0x99, 0x9e, 0xb4, 0x74, 0xb4, 0xf7, 0xd5, 0x00, 0x2b, 0x47,
	0x05, 0x17, 0x2c, 0x39, 0x2e, 0x49, 0x2a, 0x20, 0x04, 0x0b, 0x92, 0xd5, 0x36, 0xba, 0x46, 0x7f,
	0x19, 0x29, 0x1b, 0x62, 0x00, 0xb0, 0x10, 0x39, 0x1d, 0x16, 0x82, 0x70, 0xdb, 0xec, 0x5a, 0xfd,
	0x95, 0xfd, 0xa7, 0xee, 0x3f, 0xba, 0xb8, 0x1f, 0xf6, 0x5e, 0x1c, 0x2a, 0x8e, 0x97, 0x35, 0xd6,
	0xef, 0x5c, 0x5c, 0xed, 0xb6, 0xfe, 0x5c, 0xed, 0x6e, 0x4c, 0xca, 0x9f, 0xb3, 0x84, 0x0a, 0x92,
	0x64, 0x62, 0x8c, 0x1a, 0xa4, 0x3d, 0x04, 0xe0, 0x6c, 0x3d, 0x5c, 0x07, 0xd6, 0x39, 0x19, 0x57,
	0xbd, 0x48, 0x13, 0x6e, 0x80, 0xc5, 0x12, 0xc7, 0x05, 0xb1, 0x4d, 0x15, 0xd3, 0x8e, 0x8c, 0xd2,
	0x34, 0x24, 0x23, 0xdb, 0xea, 0x1a, 0xfd, 0x25, 0xa4, 0x9d, 0xde, 0x77, 0x13, 0x6c, 0xe9, 0xd1,
	0x10, 0xe1, 0x19, 0x4b, 0x39, 0x79, 0x45, 0x62, 0x5a, 0x92, 0xfc, 0x64, 0x24, 0xc7, 0x0c, 0x58,
	0xa8, 0xc7, 0xbc, 0x8f, 0x94, 0x2d, 0x63, 0x21, 0x16, 0x58, 0x51, 0xaf, 0x22, 0x65, 0xcb, 0x0e,
	0x62, 0x16, 0x29, 0xde, 0x65, 0x24, 0x4d, 0x89, 0xa2, 0xe9, 0x29, 0xb3, 0x17, 0xb4, 0x40, 0xd2,
	0x86, 0x0e, 0x00, 0x11, 0xe6, 0x83, 0x2f, 0x38, 0x15, 0x24, 0xb4, 0x17, 0xbb, 0x46, 0xdf, 0x42,
	0x8d, 0x08, 0xdc, 0x06, 0x4b, 0xd2, 0x2b, 0x38, 0x09, 0xed, 0xb6, 0xca, 0xde, 0xfa, 0xf0, 0x0d,
	0x68, 0x13, 0x39, 0x35, 0xb7, 0xef, 0x29, 0x61, 0x3b, 0x33, 0xc2, 0x36, 0x7e, 0x8f, 0x6f, 0x57,
	0x8a, 0xae, 0xeb, 0x9a, 0x86, 0x9a, 0x15, 0x0b, 0xec, 0x80, 0x65, 0x39, 0x0d, 0xcf, 0x70, 0x40,
	0xec, 0x25, 0xd5, 0xe4, 0x24, 0xd0, 0xfb, 0x0c, 0xec, 0x69, 0x49, 0x7c, 0x12, 0xd1, 0xd4, 0x8f,
	0x59, 0x70, 0xde, 0xe8, 0xc4, 0xb8, 0x8b, 0x4e, 0x7a, 0x3f, 0x4d, 0xb0, 0x39, 0x7d, 0xd8, 0x71,
	0x1a, 0xea, 0xa3, 0xde, 0x81, 0x87, 0x25, 0x8e, 0x69, 0x88, 0x05, 0xcb, 0x07, 0x45, 0x16, 0x62,
	0xb9, 0x58, 0xfa, 0xd4, 0xee, 0xec, 0x62, 0xd5, 0xc8, 0xf7, 0x0a, 0xe8, 0x2f, 0xc8, 0x93, 0xd1,
	0x7a, 0x39, 0x1d, 0xe6, 0xf0, 0x23, 0xd8, 0x0a, 0xe4, 0x29, 0x29, 0x2f, 0xf8, 0x40, 0x5d, 0x9c,
	0x5b, 0x6a, 0xf9, 0x4b, 0xe7, 0x51, 0x1f, 0xd5, 0xf8, 0xb7, 0xea, 0x9e, 0xa1, 0x47, 0xc1, 0x54,
	0xa0, 0x66, 0x9e, 0x28, 0x63, 0xdd, 0x89, 0x32, 0x3f, 0x0c, 0xb0, 0xa6, 0x2b, 0x4e, 0x46, 0x88,
	0xf0, 0x22, 0x16, 0x70, 0x13, 0xb4, 0xcf, 0x08, 0x8d, 0xce, 0x84, 0x5a, 0x49, 0x0b, 0x55, 0xde,
	0x64, 0xb5, 0x4d, 0xb5, 0xa9, 0xda, 0x81, 0x6b, 0xc0, 0x14, 0x7a, 0xdb, 0x57, 0x91, 0x29, 0x46,
	0xf0, 0x35, 0x68, 0xe7, 0x8a, 0x47, 0xad, 0xe5, 0xca, 0x7e, 0xff, 0x3f, 0x0d, 0xce, 0x5c, 0x84,
	0x4a, 0xcc, 0xaa, 0xda, 0x3f, 0xbe, 0xb8, 0x76, 0x8c, 0xcb, 0x6b, 0xc7, 0xf8, 0x7d, 0xed, 0x18,
	0xdf, 0x6e, 0x9c, 0xd6, 0xe5, 0x8d, 0xd3, 0xfa, 0x75, 0xe3, 0xb4, 0x3e, 0x3d, 0x8b, 0xa8, 0x38,
	0x2b, 0x86, 0x6e, 0xc0, 0x12, 0xaf, 0xf9, 0x4a, 0xcd, 0x7b, 0x91, 0x86, 0x6d, 0xf5, 0xb6, 0x1c,
	0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x57, 0x80, 0x10, 0x33, 0x5f, 0x05, 0x00, 0x00,
}

func (m *CustomEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for iNdEx := len(m.Attributes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attributes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypesV0_37(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintTypesV0_37(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *V047EventAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *V047EventAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *V047EventAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index {
		i--
		if m.Index {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTypesV0_37(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintTypesV0_37(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CustomResponseDeliverTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomResponseDeliverTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomResponseDeliverTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Codespace) > 0 {
		i -= len(m.Codespace)
		copy(dAtA[i:], m.Codespace)
		i = encodeVarintTypesV0_37(dAtA, i, uint64(len(m.Codespace)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypesV0_37(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.GasUsed != 0 {
		i = encodeVarintTypesV0_37(dAtA, i, uint64(m.GasUsed))
		i--
		dAtA[i] = 0x30
	}
	if m.GasWanted != 0 {
		i = encodeVarintTypesV0_37(dAtA, i, uint64(m.GasWanted))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Info) > 0 {
		i -= len(m.Info)
		copy(dAtA[i:], m.Info)
		i = encodeVarintTypesV0_37(dAtA, i, uint64(len(m.Info)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Log) > 0 {
		i -= len(m.Log)
		copy(dAtA[i:], m.Log)
		i = encodeVarintTypesV0_37(dAtA, i, uint64(len(m.Log)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTypesV0_37(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintTypesV0_37(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CustomResponseBeginBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomResponseBeginBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomResponseBeginBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypesV0_37(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CustomResponseEndBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomResponseEndBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomResponseEndBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypesV0_37(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ConsensusParamUpdates != nil {
		{
			size, err := m.ConsensusParamUpdates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypesV0_37(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorUpdates) > 0 {
		for iNdEx := len(m.ValidatorUpdates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidatorUpdates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypesV0_37(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CustomTxResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomTxResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomTxResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypesV0_37(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Tx) > 0 {
		i -= len(m.Tx)
		copy(dAtA[i:], m.Tx)
		i = encodeVarintTypesV0_37(dAtA, i, uint64(len(m.Tx)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Index != 0 {
		i = encodeVarintTypesV0_37(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintTypesV0_37(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypesV0_37(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypesV0_37(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CustomEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovTypesV0_37(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovTypesV0_37(uint64(l))
		}
	}
	return n
}

func (m *V047EventAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovTypesV0_37(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTypesV0_37(uint64(l))
	}
	if m.Index {
		n += 2
	}
	return n
}

func (m *CustomResponseDeliverTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovTypesV0_37(uint64(m.Code))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTypesV0_37(uint64(l))
	}
	l = len(m.Log)
	if l > 0 {
		n += 1 + l + sovTypesV0_37(uint64(l))
	}
	l = len(m.Info)
	if l > 0 {
		n += 1 + l + sovTypesV0_37(uint64(l))
	}
	if m.GasWanted != 0 {
		n += 1 + sovTypesV0_37(uint64(m.GasWanted))
	}
	if m.GasUsed != 0 {
		n += 1 + sovTypesV0_37(uint64(m.GasUsed))
	}
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovTypesV0_37(uint64(l))
		}
	}
	l = len(m.Codespace)
	if l > 0 {
		n += 1 + l + sovTypesV0_37(uint64(l))
	}
	return n
}

func (m *CustomResponseBeginBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovTypesV0_37(uint64(l))
		}
	}
	return n
}

func (m *CustomResponseEndBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ValidatorUpdates) > 0 {
		for _, e := range m.ValidatorUpdates {
			l = e.Size()
			n += 1 + l + sovTypesV0_37(uint64(l))
		}
	}
	if m.ConsensusParamUpdates != nil {
		l = m.ConsensusParamUpdates.Size()
		n += 1 + l + sovTypesV0_37(uint64(l))
	}
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovTypesV0_37(uint64(l))
		}
	}
	return n
}

func (m *CustomTxResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovTypesV0_37(uint64(m.Height))
	}
	if m.Index != 0 {
		n += 1 + sovTypesV0_37(uint64(m.Index))
	}
	l = len(m.Tx)
	if l > 0 {
		n += 1 + l + sovTypesV0_37(uint64(l))
	}
	l = m.Result.Size()
	n += 1 + l + sovTypesV0_37(uint64(l))
	return n
}

func sovTypesV0_37(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypesV0_37(x uint64) (n int) {
	return sovTypesV0_37(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CustomEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesV0_37
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV0_37
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesV0_37
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV0_37
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV0_37
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypesV0_37
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV0_37
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, V047EventAttribute{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesV0_37(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypesV0_37
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *V047EventAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesV0_37
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: V047EventAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: V047EventAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV0_37
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesV0_37
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV0_37
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV0_37
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesV0_37
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV0_37
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV0_37
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Index = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypesV0_37(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypesV0_37
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomResponseDeliverTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesV0_37
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomResponseDeliverTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomResponseDeliverTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV0_37
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV0_37
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypesV0_37
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV0_37
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV0_37
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesV0_37
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV0_37
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Log = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV0_37
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesV0_37
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV0_37
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasWanted", wireType)
			}
			m.GasWanted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV0_37
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasWanted |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasUsed", wireType)
			}
			m.GasUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV0_37
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasUsed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV0_37
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypesV0_37
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV0_37
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, CustomEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Codespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV0_37
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesV0_37
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV0_37
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Codespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesV0_37(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypesV0_37
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomResponseBeginBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesV0_37
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomResponseBeginBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomResponseBeginBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV0_37
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypesV0_37
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV0_37
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, CustomEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesV0_37(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypesV0_37
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomResponseEndBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesV0_37
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomResponseEndBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomResponseEndBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorUpdates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV0_37
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypesV0_37
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV0_37
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorUpdates = append(m.ValidatorUpdates, ValidatorUpdate{})
			if err := m.ValidatorUpdates[len(m.ValidatorUpdates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusParamUpdates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV0_37
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypesV0_37
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV0_37
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsensusParamUpdates == nil {
				m.ConsensusParamUpdates = &ConsensusParams{}
			}
			if err := m.ConsensusParamUpdates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV0_37
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypesV0_37
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV0_37
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, CustomEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesV0_37(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypesV0_37
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomTxResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesV0_37
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomTxResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomTxResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV0_37
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV0_37
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV0_37
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypesV0_37
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV0_37
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tx = append(m.Tx[:0], dAtA[iNdEx:postIndex]...)
			if m.Tx == nil {
				m.Tx = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesV0_37
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypesV0_37
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypesV0_37
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesV0_37(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypesV0_37
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypesV0_37(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypesV0_37
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypesV0_37
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypesV0_37
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypesV0_37
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypesV0_37
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypesV0_37
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypesV0_37        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypesV0_37          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypesV0_37 = fmt.Errorf("proto: unexpected end of group")
)
