// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v2 "github.com/cometbft/cometbft/api/cometbft/abci/v2"
)

// AppConnConsensus is an autogenerated mock type for the AppConnConsensus type
type AppConnConsensus struct {
	mock.Mock
}

// Commit provides a mock function with given fields: ctx
func (_m *AppConnConsensus) Commit(ctx context.Context) (*v2.CommitResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 *v2.CommitResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*v2.CommitResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *v2.CommitResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.CommitResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Error provides a mock function with no fields
func (_m *AppConnConsensus) Error() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Error")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExtendVote provides a mock function with given fields: ctx, req
func (_m *AppConnConsensus) ExtendVote(ctx context.Context, req *v2.ExtendVoteRequest) (*v2.ExtendVoteResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ExtendVote")
	}

	var r0 *v2.ExtendVoteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ExtendVoteRequest) (*v2.ExtendVoteResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ExtendVoteRequest) *v2.ExtendVoteResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ExtendVoteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.ExtendVoteRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FinalizeBlock provides a mock function with given fields: ctx, req
func (_m *AppConnConsensus) FinalizeBlock(ctx context.Context, req *v2.FinalizeBlockRequest) (*v2.FinalizeBlockResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for FinalizeBlock")
	}

	var r0 *v2.FinalizeBlockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.FinalizeBlockRequest) (*v2.FinalizeBlockResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.FinalizeBlockRequest) *v2.FinalizeBlockResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.FinalizeBlockResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.FinalizeBlockRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitChain provides a mock function with given fields: ctx, req
func (_m *AppConnConsensus) InitChain(ctx context.Context, req *v2.InitChainRequest) (*v2.InitChainResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for InitChain")
	}

	var r0 *v2.InitChainResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.InitChainRequest) (*v2.InitChainResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.InitChainRequest) *v2.InitChainResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.InitChainResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.InitChainRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrepareProposal provides a mock function with given fields: ctx, req
func (_m *AppConnConsensus) PrepareProposal(ctx context.Context, req *v2.PrepareProposalRequest) (*v2.PrepareProposalResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for PrepareProposal")
	}

	var r0 *v2.PrepareProposalResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.PrepareProposalRequest) (*v2.PrepareProposalResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.PrepareProposalRequest) *v2.PrepareProposalResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.PrepareProposalResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.PrepareProposalRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessProposal provides a mock function with given fields: ctx, req
func (_m *AppConnConsensus) ProcessProposal(ctx context.Context, req *v2.ProcessProposalRequest) (*v2.ProcessProposalResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ProcessProposal")
	}

	var r0 *v2.ProcessProposalResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ProcessProposalRequest) (*v2.ProcessProposalResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ProcessProposalRequest) *v2.ProcessProposalResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ProcessProposalResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.ProcessProposalRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyVoteExtension provides a mock function with given fields: ctx, req
func (_m *AppConnConsensus) VerifyVoteExtension(ctx context.Context, req *v2.VerifyVoteExtensionRequest) (*v2.VerifyVoteExtensionResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for VerifyVoteExtension")
	}

	var r0 *v2.VerifyVoteExtensionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.VerifyVoteExtensionRequest) (*v2.VerifyVoteExtensionResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.VerifyVoteExtensionRequest) *v2.VerifyVoteExtensionResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.VerifyVoteExtensionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.VerifyVoteExtensionRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAppConnConsensus creates a new instance of AppConnConsensus. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAppConnConsensus(t interface {
	mock.TestingT
	Cleanup(func())
}) *AppConnConsensus {
	mock := &AppConnConsensus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
