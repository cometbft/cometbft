// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v1beta4 "github.com/cometbft/cometbft/api/cometbft/abci/v1beta4"
)

// AppConnQuery is an autogenerated mock type for the AppConnQuery type
type AppConnQuery struct {
	mock.Mock
}

// Echo provides a mock function with given fields: _a0, _a1
func (_m *AppConnQuery) Echo(_a0 context.Context, _a1 string) (*v1beta4.EchoResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1beta4.EchoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*v1beta4.EchoResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *v1beta4.EchoResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta4.EchoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Error provides a mock function with given fields:
func (_m *AppConnQuery) Error() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Info provides a mock function with given fields: _a0, _a1
func (_m *AppConnQuery) Info(_a0 context.Context, _a1 *v1beta4.InfoRequest) (*v1beta4.InfoResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1beta4.InfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.InfoRequest) (*v1beta4.InfoResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.InfoRequest) *v1beta4.InfoResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta4.InfoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta4.InfoRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query provides a mock function with given fields: _a0, _a1
func (_m *AppConnQuery) Query(_a0 context.Context, _a1 *v1beta4.QueryRequest) (*v1beta4.QueryResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1beta4.QueryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.QueryRequest) (*v1beta4.QueryResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.QueryRequest) *v1beta4.QueryResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta4.QueryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta4.QueryRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAppConnQuery creates a new instance of AppConnQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAppConnQuery(t interface {
	mock.TestingT
	Cleanup(func())
}) *AppConnQuery {
	mock := &AppConnQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
