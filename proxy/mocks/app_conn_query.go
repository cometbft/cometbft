// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v2 "github.com/cometbft/cometbft/api/cometbft/abci/v2"
)

// AppConnQuery is an autogenerated mock type for the AppConnQuery type
type AppConnQuery struct {
	mock.Mock
}

// Echo provides a mock function with given fields: ctx, echo
func (_m *AppConnQuery) Echo(ctx context.Context, echo string) (*v2.EchoResponse, error) {
	ret := _m.Called(ctx, echo)

	if len(ret) == 0 {
		panic("no return value specified for Echo")
	}

	var r0 *v2.EchoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*v2.EchoResponse, error)); ok {
		return rf(ctx, echo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *v2.EchoResponse); ok {
		r0 = rf(ctx, echo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.EchoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, echo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Error provides a mock function with no fields
func (_m *AppConnQuery) Error() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Error")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Info provides a mock function with given fields: ctx, req
func (_m *AppConnQuery) Info(ctx context.Context, req *v2.InfoRequest) (*v2.InfoResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Info")
	}

	var r0 *v2.InfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.InfoRequest) (*v2.InfoResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.InfoRequest) *v2.InfoResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.InfoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.InfoRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query provides a mock function with given fields: ctx, req
func (_m *AppConnQuery) Query(ctx context.Context, req *v2.QueryRequest) (*v2.QueryResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 *v2.QueryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.QueryRequest) (*v2.QueryResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.QueryRequest) *v2.QueryResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.QueryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.QueryRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAppConnQuery creates a new instance of AppConnQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAppConnQuery(t interface {
	mock.TestingT
	Cleanup(func())
}) *AppConnQuery {
	mock := &AppConnQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
