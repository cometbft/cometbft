// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v1beta4 "github.com/cometbft/cometbft/api/cometbft/abci/v1beta4"
)

// AppConnSnapshot is an autogenerated mock type for the AppConnSnapshot type
type AppConnSnapshot struct {
	mock.Mock
}

// ApplySnapshotChunk provides a mock function with given fields: _a0, _a1
func (_m *AppConnSnapshot) ApplySnapshotChunk(_a0 context.Context, _a1 *v1beta4.ApplySnapshotChunkRequest) (*v1beta4.ApplySnapshotChunkResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1beta4.ApplySnapshotChunkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.ApplySnapshotChunkRequest) (*v1beta4.ApplySnapshotChunkResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.ApplySnapshotChunkRequest) *v1beta4.ApplySnapshotChunkResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta4.ApplySnapshotChunkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta4.ApplySnapshotChunkRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Error provides a mock function with given fields:
func (_m *AppConnSnapshot) Error() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListSnapshots provides a mock function with given fields: _a0, _a1
func (_m *AppConnSnapshot) ListSnapshots(_a0 context.Context, _a1 *v1beta4.ListSnapshotsRequest) (*v1beta4.ListSnapshotsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1beta4.ListSnapshotsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.ListSnapshotsRequest) (*v1beta4.ListSnapshotsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.ListSnapshotsRequest) *v1beta4.ListSnapshotsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta4.ListSnapshotsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta4.ListSnapshotsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadSnapshotChunk provides a mock function with given fields: _a0, _a1
func (_m *AppConnSnapshot) LoadSnapshotChunk(_a0 context.Context, _a1 *v1beta4.LoadSnapshotChunkRequest) (*v1beta4.LoadSnapshotChunkResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1beta4.LoadSnapshotChunkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.LoadSnapshotChunkRequest) (*v1beta4.LoadSnapshotChunkResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.LoadSnapshotChunkRequest) *v1beta4.LoadSnapshotChunkResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta4.LoadSnapshotChunkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta4.LoadSnapshotChunkRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OfferSnapshot provides a mock function with given fields: _a0, _a1
func (_m *AppConnSnapshot) OfferSnapshot(_a0 context.Context, _a1 *v1beta4.OfferSnapshotRequest) (*v1beta4.OfferSnapshotResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1beta4.OfferSnapshotResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.OfferSnapshotRequest) (*v1beta4.OfferSnapshotResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.OfferSnapshotRequest) *v1beta4.OfferSnapshotResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta4.OfferSnapshotResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta4.OfferSnapshotRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAppConnSnapshot creates a new instance of AppConnSnapshot. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAppConnSnapshot(t interface {
	mock.TestingT
	Cleanup(func())
}) *AppConnSnapshot {
	mock := &AppConnSnapshot{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
