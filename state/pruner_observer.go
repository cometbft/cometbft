package state

import (
	"time"
)

// PrunerObserver allows an external observer to be notified of certain events
// generated by the [Pruner].
type PrunerObserver interface {
	// PrunerStarted is called when the pruner's background pruning routine has
	// been started.
	PrunerStarted(interval time.Duration)
	// PrunerPruned is called after each successful pruning operation.
	PrunerPruned(prunedInfo *PrunedInfo)
}

// PrunedInfo provides information about a single run of the pruner.
type PrunedInfo struct {
	Blocks  *BlocksPrunedInfo
	ABCIRes *ABCIResponsesPrunedInfo
}

// BlocksPrunedInfo provides information about blocks pruned during a single
// run of the pruner.
type BlocksPrunedInfo struct {
	FromHeight int64
	ToHeight   int64
}

// ABCIResponsesPrunedInfo provides information about ABCI responses pruned
// during a single run of the pruner.
type ABCIResponsesPrunedInfo struct {
	FromHeight int64
	ToHeight   int64
}

// NoopPrunerObserver does nothing.
type NoopPrunerObserver struct{}

var _ PrunerObserver = (*NoopPrunerObserver)(nil)

// PrunerPruned implements PrunerObserver.
func (*NoopPrunerObserver) PrunerPruned(*PrunedInfo) {}

// PrunerStarted implements PrunerObserver.
func (*NoopPrunerObserver) PrunerStarted(time.Duration) {}
